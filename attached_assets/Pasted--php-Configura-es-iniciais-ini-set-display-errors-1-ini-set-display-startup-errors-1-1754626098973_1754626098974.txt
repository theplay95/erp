<?php
// Configura√ß√µes iniciais
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
session_start();

// Configura√ß√£o do banco de dados
$pdo = null;
try {
    if (file_exists('db_config.php')) {
        include 'db_config.php';
        if (isset($db_config)) {
            $dsn = "mysql:host={$db_config['host']};port={$db_config['port']};dbname={$db_config['dbname']};charset=utf8mb4";
            $pdo = new PDO($dsn, $db_config['username'], $db_config['password']);
            $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        }
    }
} catch(PDOException $e) {
    error_log("Erro de conex√£o: " . $e->getMessage());
}

// Gera token CSRF
if (empty($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}

// Processamento AJAX para adicionar produtos
if (isset($_POST['ajax_add_to_cart'])) {
    header('Content-Type: application/json');
    
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }
    
    $product_id = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity'];
    $response = ['success' => false, 'message' => '', 'cart_count' => 0, 'cart_html' => ''];
    
    // Busca produto no banco para validar
    $stmt = $pdo->prepare("SELECT * FROM products WHERE id = ? AND stock > 0");
    $stmt->execute([$product_id]);
    $product = $stmt->fetch();
    
    if ($product) {
        $item_index = null;
        
        // Procura o produto no carrinho
        foreach ($_SESSION['cart'] as $index => $item) {
            if ($item['id'] == $product_id) {
                $item_index = $index;
                break;
            }
        }
        
        // Se o produto j√° est√° no carrinho, atualiza a quantidade
        if ($item_index !== null) {
            $new_quantity = $_SESSION['cart'][$item_index]['quantity'] + $quantity;
            if ($new_quantity <= $product['stock']) {
                $_SESSION['cart'][$item_index]['quantity'] = $new_quantity;
                $response['success'] = true;
                $response['message'] = 'Quantidade atualizada no carrinho!';
            } else {
                $response['message'] = 'Estoque insuficiente!';
            }
        } 
        // Se n√£o est√° no carrinho, adiciona como novo item
        else {
            if ($quantity <= $product['stock']) {
                $_SESSION['cart'][] = [
                    'id' => $product['id'],
                    'name' => $product['name'],
                    'price' => $product['price'],
                    'quantity' => $quantity
                ];
                $response['success'] = true;
                $response['message'] = 'Produto adicionado ao carrinho!';
            } else {
                $response['message'] = 'Estoque insuficiente!';
            }
        }
        
        // Calcular totais e gerar HTML do carrinho
        if ($response['success']) {
            $cart_count = array_sum(array_column($_SESSION['cart'], 'quantity'));
            $subtotal = array_sum(array_map(function($item) {
                return $item['price'] * $item['quantity'];
            }, $_SESSION['cart']));
            
            $response['cart_count'] = $cart_count;
            $response['subtotal'] = number_format($subtotal, 2, ',', '.');
            
            // Gerar HTML do carrinho
            ob_start();
            foreach ($_SESSION['cart'] as $item) {
                echo '<div class="cart-item" data-product-id="'.$item['id'].'">';
                echo '<div>';
                echo '<strong>'.htmlspecialchars($item['name']).'</strong><br>';
                echo '<span style="color: #667eea; font-size: 16px;">R$ '.number_format($item['price'], 2, ',', '.').'</span>';
                echo '</div>';
                echo '<div style="display: flex; align-items: center; gap: 15px;">';
                echo '<input type="number" class="quantity-input" data-product-id="'.$item['id'].'" value="'.$item['quantity'].'" min="1" style="width: 80px; padding: 8px;">';
                echo '<span style="font-weight: bold; color: #28a745; min-width: 80px;">R$ '.number_format($item['price'] * $item['quantity'], 2, ',', '.').'</span>';
                echo '<button class="btn btn-danger remove-item" data-product-id="'.$item['id'].'" style="padding: 8px 12px;">üóëÔ∏è</button>';
                echo '</div>';
                echo '</div>';
            }
            $response['cart_html'] = ob_get_clean();
        }
    } else {
        $response['message'] = 'Produto n√£o encontrado ou esgotado!';
    }
    
    echo json_encode($response);
    exit();
}

// Processamento AJAX para remover produtos
if (isset($_POST['ajax_remove_item'])) {
    header('Content-Type: application/json');
    
    $product_id = (int)$_POST['product_id'];
    $response = ['success' => false, 'message' => ''];
    
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array_filter($_SESSION['cart'], function($item) use ($product_id) {
            return $item['id'] !== $product_id;
        });
        $_SESSION['cart'] = array_values($_SESSION['cart']);
        
        $response['success'] = true;
        $response['message'] = 'Produto removido do carrinho!';
        
        // Calcular novos totais
        $cart_count = array_sum(array_column($_SESSION['cart'], 'quantity'));
        $subtotal = array_sum(array_map(function($item) {
            return $item['price'] * $item['quantity'];
        }, $_SESSION['cart']));
        
        $response['cart_count'] = $cart_count;
        $response['subtotal'] = number_format($subtotal, 2, ',', '.');
        
        // Gerar novo HTML do carrinho
        ob_start();
        if (empty($_SESSION['cart'])) {
            echo '<p style="text-align: center; color: #999; padding: 50px;">Seu carrinho est√° vazio<br>Clique nos produtos para adicionar</p>';
        } else {
            foreach ($_SESSION['cart'] as $item) {
                echo '<div class="cart-item" data-product-id="'.$item['id'].'">';
                echo '<div>';
                echo '<strong>'.htmlspecialchars($item['name']).'</strong><br>';
                echo '<span style="color: #667eea; font-size: 16px;">R$ '.number_format($item['price'], 2, ',', '.').'</span>';
                echo '</div>';
                echo '<div style="display: flex; align-items: center; gap: 15px;">';
                echo '<input type="number" class="quantity-input" data-product-id="'.$item['id'].'" value="'.$item['quantity'].'" min="1" style="width: 80px; padding: 8px;">';
                echo '<span style="font-weight: bold; color: #28a745; min-width: 80px;">R$ '.number_format($item['price'] * $item['quantity'], 2, ',', '.').'</span>';
                echo '<button class="btn btn-danger remove-item" data-product-id="'.$item['id'].'" style="padding: 8px 12px;">üóëÔ∏è</button>';
                echo '</div>';
                echo '</div>';
            }
        }
        $response['cart_html'] = ob_get_clean();
    }
    
    echo json_encode($response);
    exit();
}

// Processamento AJAX para atualizar quantidade
if (isset($_POST['ajax_update_quantity'])) {
    header('Content-Type: application/json');
    
    $product_id = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity'];
    $response = ['success' => false, 'message' => ''];
    
    if ($quantity > 0 && isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as &$item) {
            if ($item['id'] == $product_id) {
                $stmt = $pdo->prepare("SELECT stock FROM products WHERE id = ?");
                $stmt->execute([$product_id]);
                $stock = $stmt->fetchColumn();
                
                if ($quantity <= $stock) {
                    $item['quantity'] = $quantity;
                    $response['success'] = true;
                    $response['message'] = 'Quantidade atualizada!';
                } else {
                    $response['message'] = 'Estoque insuficiente!';
                }
                break;
            }
        }
        
        if ($response['success']) {
            // Calcular novos totais
            $cart_count = array_sum(array_column($_SESSION['cart'], 'quantity'));
            $subtotal = array_sum(array_map(function($item) {
                return $item['price'] * $item['quantity'];
            }, $_SESSION['cart']));
            
            $response['cart_count'] = $cart_count;
            $response['subtotal'] = number_format($subtotal, 2, ',', '.');
            $response['item_total'] = number_format($item['price'] * $item['quantity'], 2, ',', '.');
        }
    }
    
    echo json_encode($response);
    exit();
}

// Processamento principal
$show_phone_form = true;
$existing_customer = null;
$customer_orders = [];
$phone = '';
$step = 'identify'; // identify, products, confirmation

// Verifica se j√° identificou o cliente
if (isset($_SESSION['customer_phone'])) {
    $phone = $_SESSION['customer_phone'];
    $show_phone_form = false;
    $step = 'products';
}

// Processa identifica√ß√£o por telefone
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['customer_phone'])) {
    $phone = preg_replace('/[^0-9]/', '', $_POST['customer_phone']);
    $_SESSION['customer_phone'] = $phone;
    
    // Busca cliente existente
    $stmt = $pdo->prepare("SELECT * FROM sales WHERE customer_phone LIKE ? ORDER BY created_at DESC LIMIT 1");
    $stmt->execute(["%$phone%"]);
    $existing_customer = $stmt->fetch();
    
    if ($existing_customer) {
        $stmt = $pdo->prepare("SELECT si.*, p.name as product_name FROM sale_items si JOIN products p ON si.product_id = p.id WHERE si.sale_id = ?");
        $stmt->execute([$existing_customer['id']]);
        $customer_orders = $stmt->fetchAll();
        
        // Se pediu para repetir o √∫ltimo pedido
        if (isset($_POST['repeat_order'])) {
            $_SESSION['cart'] = array_map(function($item) {
                return [
                    'id' => $item['product_id'],
                    'name' => $item['product_name'],
                    'price' => $item['price'],
                    'quantity' => $item['quantity']
                ];
            }, $customer_orders);
        }
    }
    
    $show_phone_form = false;
    $step = 'products';
}

// Processa novo pedido (ignorando hist√≥rico)
if (isset($_POST['new_order'])) {
    $_SESSION['customer_data'] = [
        'name' => $existing_customer['customer_name'] ?? '',
        'phone' => $phone,
        'address' => $existing_customer['delivery_address'] ?? ''
    ];
    
    unset($_SESSION['cart']);
    header("Location: ".strtok($_SERVER['REQUEST_URI'], '?'));
    exit();
}

// C√°lculo do subtotal e total
$subtotal = 0;
if (!empty($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
        $subtotal += $item['price'] * $item['quantity'];
    }
}
$delivery_fee = $_POST['delivery_fee'] ?? 0;
$total = $subtotal + $delivery_fee;

// Processa finaliza√ß√£o do pedido
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['complete_order'])) {
    if (!isset($_POST['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token']) {
        die('Token CSRF inv√°lido');
    }
    
    if (empty($_SESSION['cart'])) {
        $error_message = "‚ùå Adicione produtos ao carrinho!";
    } else {
        $customer_name = trim($_POST['customer_name'] ?? '');
        $customer_phone = trim($_POST['customer_phone'] ?? '');
        $payment_method = $_POST['payment_method'] ?? '';
        $delivery_address = trim($_POST['delivery_address'] ?? '');
        $delivery_fee = (float)($_POST['delivery_fee'] ?? 0);
        $observations = trim($_POST['observations'] ?? '');
        
        if (empty($customer_name)) {
            $error_message = "‚ùå Nome √© obrigat√≥rio!";
        } elseif (empty($customer_phone)) {
            $error_message = "‚ùå Telefone √© obrigat√≥rio!";
        } elseif ($delivery_fee > 0 && empty($delivery_address)) {
            $error_message = "‚ùå Endere√ßo √© obrigat√≥rio para entrega!";
        } elseif (empty($payment_method)) {
            $error_message = "‚ùå Selecione a forma de pagamento!";
        } else {
            try {
                $pdo->beginTransaction();
                
                $stmt = $pdo->prepare("INSERT INTO sales (total, payment_method, customer_name, customer_phone, delivery_address, delivery_fee, observations, status, created_at) 
                                      VALUES (?, ?, ?, ?, ?, ?, ?, 'pendente', NOW())");
                $stmt->execute([$total, $payment_method, $customer_name, $customer_phone, $delivery_address, $delivery_fee, $observations]);
                $sale_id = $pdo->lastInsertId();
                
                foreach ($_SESSION['cart'] as $item) {
                    $stmt = $pdo->prepare("INSERT INTO sale_items (sale_id, product_id, quantity, price) VALUES (?, ?, ?, ?)");
                    $stmt->execute([$sale_id, $item['id'], $item['quantity'], $item['price']]);
                    
                    $stmt = $pdo->prepare("UPDATE products SET stock = stock - ? WHERE id = ?");
                    $stmt->execute([$item['quantity'], $item['id']]);
                }
                
                $pdo->commit();
                
                unset($_SESSION['cart']);
                $step = 'confirmation';
                $order_number = $sale_id;
                $success_message = "üéâ Pedido #$sale_id realizado com sucesso!";
                
            } catch (Exception $e) {
                $pdo->rollBack();
                $error_message = "‚ùå Erro ao processar pedido: " . $e->getMessage();
                error_log("Erro no pedido: " . $e->getMessage());
            }
        }
    }
}

// Busca produtos dispon√≠veis
try {
    $categories = $pdo->query("SELECT DISTINCT category FROM products WHERE stock > 0 ORDER BY category")->fetchAll(PDO::FETCH_COLUMN);
    $products = $pdo->query("SELECT * FROM products WHERE stock > 0 ORDER BY category, name")->fetchAll(PDO::FETCH_ASSOC);
} catch (Exception $e) {
    $categories = [];
    $products = [];
    error_log("Erro ao buscar produtos: " . $e->getMessage());
}
?>
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mundo da Carne - Fa√ßa seu Pedido</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }
        
        .header {
            background: white;
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        .header h1 {
            color: #333;
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .header p {
            color: #666;
            font-size: 1.2em;
        }
        
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 0 20px; 
        }
        
        .grid { 
            display: grid; 
            grid-template-columns: 1fr; 
            gap: 30px; 
            margin-bottom: 30px;
        }
        
        .card { 
            background: white; 
            padding: 30px; 
            border-radius: 15px; 
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }
        
        .card h2, .card h3 { 
            margin-bottom: 20px; 
            color: #333; 
            font-size: 1.8em;
        }
        
        /* Carrinho Flutuante */
        .floating-cart {
            position: fixed;
            top: 50%;
            right: 20px;
            transform: translateY(-50%);
            width: 400px;
            max-height: 80vh;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            z-index: 1000;
            overflow: hidden;
            transition: all 0.3s ease;
        }
        
        .floating-cart.minimized {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            cursor: pointer;
        }
        
        .floating-cart.minimized .cart-content {
            display: none;
        }
        
        .cart-header {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
        }
        
        .cart-count {
            background: #ff4757;
            color: white;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
        }
        
        .cart-content {
            max-height: calc(80vh - 200px);
            overflow-y: auto;
            padding: 20px;
        }
        
        .cart-footer {
            padding: 20px;
            border-top: 1px solid #eee;
            background: #f8f9fa;
        }
        
        /* Filtros */
        .filters { 
            display: flex; 
            gap: 15px; 
            margin-bottom: 25px; 
            flex-wrap: wrap; 
        }
        
        .filters input, .filters select { 
            flex: 1; 
            min-width: 150px; 
            padding: 12px; 
            border: 2px solid #e0e0e0; 
            border-radius: 8px; 
            font-size: 14px;
            transition: all 0.3s;
        }
        
        .filters input:focus, .filters select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        /* Grid de produtos */
        .product-grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); 
            gap: 20px; 
            max-height: none;
            overflow: visible;
            padding-right: 0;
        }
        
        .product-item { 
            border: 2px solid #f0f0f0; 
            padding: 20px; 
            border-radius: 12px; 
            cursor: pointer; 
            transition: all 0.3s; 
            text-align: center; 
            background: #fafafa;
        }
        
        .product-item:hover { 
            transform: translateY(-8px); 
            box-shadow: 0 15px 40px rgba(0,0,0,0.15); 
            border-color: #667eea;
        }
        
        .product-item.out-of-stock {
            opacity: 0.5;
            cursor: not-allowed;
            filter: grayscale(1);
        }
        
        .product-placeholder { 
            width: 100px; 
            height: 100px; 
            background: linear-gradient(45deg, #e0e0e0, #f0f0f0); 
            border-radius: 8px; 
            display: flex; 
            align-items: center; 
            justify-content: center; 
            margin: 0 auto 15px; 
            color: #999; 
            font-size: 12px; 
        }
        
        .product-name {
            font-weight: bold;
            margin-bottom: 8px;
            color: #333;
        }
        
        .product-price {
            color: #667eea;
            font-weight: bold;
            font-size: 1.3em;
            margin-bottom: 5px;
        }
        
        .product-stock {
            font-size: 12px;
            color: #28a745;
        }
        
        /* Carrinho */
        .cart-item { 
            border: 1px solid #e0e0e0; 
            padding: 15px; 
            border-radius: 10px; 
            margin-bottom: 10px; 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
            background: #f9f9f9;
        }
        
        .cart-total { 
            font-size: 1.2em; 
            font-weight: bold; 
            padding: 15px; 
            background: linear-gradient(45deg, #28a745, #20c997); 
            border-radius: 10px; 
            text-align: center; 
            color: white;
            margin-bottom: 15px;
        }
        
        /* Formul√°rio */
        .form-group { 
            margin-bottom: 20px; 
        }
        
        .form-group label { 
            display: block; 
            margin-bottom: 8px; 
            font-weight: bold; 
            color: #555; 
        }
        
        .form-group input, .form-group select, .form-group textarea {
            width: 100%; 
            padding: 15px; 
            border: 2px solid #e0e0e0; 
            border-radius: 8px; 
            font-size: 16px;
            transition: all 0.3s;
        }
        
        .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        /* Bot√µes */
        .btn { 
            padding: 12px 20px; 
            border: none; 
            border-radius: 8px; 
            cursor: pointer; 
            font-size: 14px; 
            font-weight: bold;
            text-decoration: none; 
            display: inline-block; 
            text-align: center; 
            transition: all 0.3s; 
            margin: 4px; 
        }
        
        .btn-primary { 
            background: linear-gradient(45deg, #667eea, #764ba2); 
            color: white; 
        }
        
        .btn-success { 
            background: linear-gradient(45deg, #28a745, #20c997); 
            color: white; 
        }
        
        .btn-danger { 
            background: linear-gradient(45deg, #dc3545, #c82333); 
            color: white; 
        }
        
        .btn:hover { 
            transform: translateY(-2px); 
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }
        
        .btn:disabled { 
            opacity: 0.5; 
            cursor: not-allowed; 
            transform: none;
        }
        
        /* Alertas */
        .alert { 
            padding: 20px; 
            border-radius: 10px; 
            margin-bottom: 25px; 
            font-weight: bold;
        }
        
        .alert-success { 
            background: linear-gradient(45deg, #d4edda, #c3e6cb); 
            border: 2px solid #28a745; 
            color: #155724; 
        }
        
        .alert-error { 
            background: linear-gradient(45deg, #f8d7da, #f5c6cb); 
            border: 2px solid #dc3545; 
            color: #721c24; 
        }
        
        /* Toast notifications */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #333;
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            z-index: 2000;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
        }
        
        .toast.show {
            opacity: 1;
            transform: translateX(0);
        }
        
        .toast.success {
            background: #28a745;
        }
        
        .toast.error {
            background: #dc3545;
        }
        
        /* Informa√ß√µes adicionais */
        .info-box {
            background: linear-gradient(45deg, #e3f2fd, #bbdefb);
            border: 2px solid #2196f3;
            border-radius: 10px;
            padding: 20px;
            margin-top: 25px;
        }
        
        .info-box h4 {
            color: #1976d2;
            margin-bottom: 10px;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .floating-cart {
                position: relative;
                right: auto;
                top: auto;
                transform: none;
                width: 100%;
                max-height: none;
                margin-top: 20px;
            }
            
            .floating-cart.minimized {
                width: 100%;
                height: auto;
                border-radius: 15px;
            }
            
            .product-grid { 
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); 
            }
            
            .cart-item { 
                flex-direction: column; 
                align-items: flex-start; 
            }
            
            .filters {
                flex-direction: column;
            }
            
            .header h1 {
                font-size: 2em;
            }
        }
        
        /* Loading */
        .loading {
            text-align: center;
            padding: 50px;
            color: #666;
        }
        
        /* Hist√≥rico de pedidos */
        .customer-info {
            background: #f8f9fa;
            border: 2px solid #dee2e6;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
        }
        
        /* Tabelas */
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }
        
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>ü•© Mundo da Carne</h1>
        <p>Fa√ßa seu pedido online e receba em casa!</p>
    </div>

    <div class="container">
        <?php if (isset($success_message)): ?>
            <div class="alert alert-success">
                <?= htmlspecialchars($success_message) ?>
                <br><br>
                <strong>üìû Entraremos em contato em breve para confirmar seu pedido!</strong>
                <br>
                <button onclick="window.print()" class="btn btn-primary" style="margin-top: 10px;">üñ®Ô∏è Imprimir Comprovante</button>
                <button onclick="location.href='?new_order=1'" class="btn btn-success" style="margin-top: 10px;">üõí Fazer Novo Pedido</button>
            </div>
        <?php elseif (isset($error_message)): ?>
            <div class="alert alert-error"><?= htmlspecialchars($error_message) ?></div>
        <?php endif; ?>

        <?php if ($step == 'identify'): ?>
            <div class="card" style="max-width: 500px; margin: 50px auto;">
                <h3>üì± Identifica√ß√£o</h3>
                <p>Por favor, informe seu n√∫mero de telefone para continuar:</p>
                
                <form method="POST" style="margin-top: 30px;">
                    <div class="form-group">
                        <label>üìû Telefone/WhatsApp *:</label>
                        <input type="tel" name="customer_phone" required placeholder="(00) 00000-0000" value="<?= htmlspecialchars($phone) ?>">
                    </div>
                    
                    <div style="text-align: center; margin-top: 30px;">
                        <button type="submit" class="btn btn-success" style="font-size: 18px; padding: 15px 30px;">
                            Continuar
                        </button>
                    </div>
                </form>
            </div>
        
        <?php elseif ($step == 'products' && $existing_customer && !isset($_SESSION['cart'])): ?>
            <div class="card" style="max-width: 800px; margin: 30px auto;">
                <h3>üëã Ol√°, <?= htmlspecialchars($existing_customer['customer_name']) ?>!</h3>
                <p>Identificamos que voc√™ j√° √© nosso cliente. Aqui est√° seu √∫ltimo pedido:</p>
                
                <div style="background: #f8f9fa; border-radius: 10px; padding: 20px; margin: 20px 0;">
                    <h4>√öltimo pedido - <?= date('d/m/Y H:i', strtotime($existing_customer['created_at'])) ?></h4>
                    <p><strong>Total:</strong> R$ <?= number_format($existing_customer['total'], 2, ',', '.') ?></p>
                    <p><strong>Status:</strong> <?= ucfirst($existing_customer['status']) ?></p>
                    
                    <?php if (!empty($customer_orders)): ?>
                        <div style="margin-top: 15px;">
                            <h5>Itens do pedido:</h5>
                            <table>
                                <thead>
                                    <tr>
                                        <th>Produto</th>
                                        <th>Quantidade</th>
                                        <th>Pre√ßo</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php foreach ($customer_orders as $item): ?>
                                        <tr>
                                            <td><?= htmlspecialchars($item['product_name']) ?></td>
                                            <td><?= $item['quantity'] ?></td>
                                            <td>R$ <?= number_format($item['price'] * $item['quantity'], 2, ',', '.') ?></td>
                                        </tr>
                                    <?php endforeach; ?>
                                </tbody>
                            </table>
                        </div>
                    <?php endif; ?>
                </div>
                
                <div style="display: flex; justify-content: center; gap: 20px; margin-top: 30px;">
                    <form method="POST">
                        <input type="hidden" name="customer_phone" value="<?= htmlspecialchars($phone) ?>">
                        <button type="submit" name="new_order" class="btn btn-primary" style="padding: 15px 30px;">
                            üõí Fazer Novo Pedido
                        </button>
                    </form>
                    
                    <form method="POST">
                        <input type="hidden" name="customer_phone" value="<?= htmlspecialchars($phone) ?>">
                        <input type="hidden" name="repeat_order" value="1">
                        <button type="submit" class="btn btn-success" style="padding: 15px 30px;">
                            üîÑ Repetir √öltimo Pedido
                        </button>
                    </form>
                </div>
            </div>
        
        <?php elseif ($step == 'products'): ?>
            <div class="card">
                <h3>üõçÔ∏è Nossos Produtos</h3>
                
                <div class="filters">
                    <select id="category-filter" onchange="filterProducts()">
                        <option value="">Todas as Categorias</option>
                        <?php foreach ($categories as $category): ?>
                            <option value="<?= htmlspecialchars($category) ?>"><?= htmlspecialchars($category) ?></option>
                        <?php endforeach; ?>
                    </select>
                    <input type="text" id="search-filter" onkeyup="filterProducts()" placeholder="üîç Buscar produto...">
                </div>

                <div id="product-list" class="product-grid">
                    <?php foreach ($products as $product): ?>
                        <div class="product-item <?= $product['stock'] <= 0 ? 'out-of-stock' : '' ?>"
                             data-category="<?= htmlspecialchars($product['category']) ?>"
                             data-name="<?= htmlspecialchars(strtolower($product['name'])) ?>"
                             style="display: flex; flex-direction: column; justify-content: space-between; padding: 20px; border: 1px solid #ddd; border-radius: 10px; min-height: 280px;">

                            <div style="text-align: center;">
                                <?php if ($product['image']): ?>
                                    <img src="uploads/products/<?= $product['image'] ?>" alt="<?= htmlspecialchars($product['name']) ?>"
                                         style="width: 100px; height: 100px; object-fit: cover; border-radius: 8px; margin-bottom: 15px;">
                                <?php else: ?>
                                    <div class="product-placeholder" style="height: 100px; display: flex; align-items: center; justify-content: center; background: #f1f1f1; border-radius: 8px; margin-bottom: 15px;">Sem imagem</div>
                                <?php endif; ?>

                                <div class="product-name" style="font-weight: bold; font-size: 16px;"><?= htmlspecialchars($product['name']) ?></div>
                                <div class="product-price" style="color: #28a745; font-size: 18px; margin: 5px 0;">
                                    R$ <?= number_format($product['price'], 2, ',', '.') ?>
                                </div>
                                <div class="product-stock" style="font-size: 14px; color: <?= $product['stock'] > 0 ? '#007bff' : '#999' ?>;">
                                    <?= $product['stock'] > 0 ? 'Dispon√≠vel' : 'Esgotado' ?>
                                </div>
                            </div>

                            <?php if ($product['stock'] > 0): ?>
                                <button type="button" class="btn btn-success add-to-cart-btn" 
                                        data-product-id="<?= $product['id'] ?>"
                                        data-product-name="<?= htmlspecialchars($product['name']) ?>"
                                        data-product-price="<?= $product['price'] ?>"
                                        style="width: 100%; padding: 10px; margin-top: 15px;">
                                    üõí Adicionar
                                </button>
                            <?php else: ?>
                                <button class="btn btn-secondary" style="width: 100%; padding: 10px; margin-top: 15px;" disabled>
                                    Esgotado
                                </button>
                            <?php endif; ?>
                        </div>
                    <?php endforeach; ?>
                </div>
            </div>

            <!-- Carrinho Flutuante -->
            <div class="floating-cart" id="floating-cart">
                <div class="cart-header" onclick="toggleCart()">
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <span>üõí Meu Pedido</span>
                        <div class="cart-count" id="cart-count"><?= array_sum(array_column($_SESSION['cart'] ?? [], 'quantity')) ?></div>
                    </div>
                    <span id="cart-toggle">‚àí</span>
                </div>
                
                <div class="cart-content">
                    <div id="cart-items">
                        <?php if (empty($_SESSION['cart'])): ?>
                            <p style="text-align: center; color: #999; padding: 30px;">Seu carrinho est√° vazio<br>Clique nos produtos para adicionar</p>
                        <?php else: ?>
                            <?php foreach ($_SESSION['cart'] as $item): ?>
                                <div class="cart-item" data-product-id="<?= $item['id'] ?>">
                                    <div>
                                        <strong><?= htmlspecialchars($item['name']) ?></strong><br>
                                        <span style="color: #667eea; font-size: 14px;">R$ <?= number_format($item['price'], 2, ',', '.') ?></span>
                                    </div>
                                    <div style="display: flex; align-items: center; gap: 10px;">
                                        <input type="number" class="quantity-input" data-product-id="<?= $item['id'] ?>" value="<?= $item['quantity'] ?>" min="1" style="width: 60px; padding: 5px; font-size: 12px;">
                                        <span style="font-weight: bold; color: #28a745; min-width: 70px; font-size: 14px;">R$ <?= number_format($item['price'] * $item['quantity'], 2, ',', '.') ?></span>
                                        <button class="btn btn-danger remove-item" data-product-id="<?= $item['id'] ?>" style="padding: 5px 8px; font-size: 12px;">üóëÔ∏è</button>
                                    </div>
                                </div>
                            <?php endforeach; ?>
                        <?php endif; ?>
                    </div>
                </div>
                
                <div class="cart-footer">
                    <div class="cart-total">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                            <span>Subtotal:</span>
                            <span id="subtotal-display">R$ <?= number_format($subtotal, 2, ',', '.') ?></span>
                        </div>
                        <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                            <span>Entrega:</span>
                            <span id="delivery-display">R$ 0,00</span>
                        </div>
                        <div style="font-size: 18px; font-weight: bold; text-align: center; border-top: 1px solid rgba(255,255,255,0.3); padding-top: 10px;">
                            Total: <span id="total-display">R$ <?= number_format($total, 2, ',', '.') ?></span>
                        </div>
                    </div>
                    
                    <button type="button" class="btn btn-success" onclick="showCheckoutForm()" style="width: 100%; margin-bottom: 10px;" id="checkout-btn" <?= empty($_SESSION['cart']) ? 'disabled' : '' ?>>
                        ‚úÖ Finalizar Pedido
                    </button>
                    <button type="button" class="btn btn-danger" onclick="clearCart()" style="width: 100%;">
                        üóëÔ∏è Limpar Carrinho
                    </button>
                </div>
            </div>

            <!-- Formul√°rio de Checkout (oculto inicialmente) -->
            <div class="card" id="checkout-form" style="display: none; margin-top: 30px;">
                <h3>üìù Finalizar Pedido</h3>
                
                <form method="POST" id="order-form">
                    <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">

                    <h4 style="margin-bottom: 20px; color: #333;">üìù Seus Dados</h4>
                    
                    <div class="form-group">
                        <label>üë§ Nome Completo *:</label>
                        <input type="text" name="customer_name" required placeholder="Seu nome completo" 
                               value="<?= htmlspecialchars($_SESSION['customer_data']['name'] ?? $existing_customer['customer_name'] ?? '') ?>">
                    </div>

                    <div class="form-group">
                        <label>üìû Telefone/WhatsApp *:</label>
                        <input type="tel" name="customer_phone" required placeholder="(00) 00000-0000" 
                               value="<?= htmlspecialchars($_SESSION['customer_data']['phone'] ?? $phone ?? '') ?>">
                    </div>

                    <div class="form-group">
                        <label>üìÆ CEP <span id="cep-required" style="color: red; display: none;">*</span>:</label>
                        <input type="text" name="cep" id="cep" placeholder="00000-000" maxlength="9" onkeyup="formatCEP(this); searchCEP(this.value)">
                        <small style="color: #666; font-style: italic;">Digite o CEP para preenchimento autom√°tico</small>
                    </div>

                    <div class="form-group">
                        <label>üè† Endere√ßo de Entrega <span id="address-required" style="color: red; display: none;">*</span>:</label>
                        <input type="text" name="street" id="street" placeholder="Digite a rua/avenida" onblur="searchCEPByAddress()">
                        <small style="color: #666; font-style: italic;">O CEP ser√° preenchido automaticamente ao digitar o endere√ßo</small>
                    </div>

                    <div style="display: grid; grid-template-columns: 1fr 2fr; gap: 15px;">
                        <div class="form-group">
                            <label>üè† N√∫mero *:</label>
                            <input type="text" name="number" id="number" placeholder="N√∫mero" required>
                        </div>
                        <div class="form-group">
                            <label>üè† Complemento:</label>
                            <input type="text" name="complement" id="complement" placeholder="Apartamento, bloco, etc.">
                        </div>
                    </div>

                    <div class="form-group">
                        <label>üèòÔ∏è Bairro:</label>
                        <input type="text" name="neighborhood" id="neighborhood" placeholder="Digite o bairro" onblur="searchCEPByAddress()">
                    </div>

                    <div style="display: grid; grid-template-columns: 2fr 1fr; gap: 15px;">
                        <div class="form-group">
                            <label>üèôÔ∏è Cidade:</label>
                            <input type="text" name="city" id="city" placeholder="Digite a cidade" onblur="searchCEPByAddress()">
                        </div>
                        <div class="form-group">
                            <label>üó∫Ô∏è UF:</label>
                            <select name="state" id="state" onchange="searchCEPByAddress()">
                                <option value="">Selecione o estado</option>
                                <option value="AC">Acre</option>
                                <option value="AL">Alagoas</option>
                                <option value="AP">Amap√°</option>
                                <option value="AM">Amazonas</option>
                                <option value="BA">Bahia</option>
                                <option value="CE">Cear√°</option>
                                <option value="DF">Distrito Federal</option>
                                <option value="ES">Esp√≠rito Santo</option>
                                <option value="GO">Goi√°s</option>
                                <option value="MA">Maranh√£o</option>
                                <option value="MT">Mato Grosso</option>
                                <option value="MS">Mato Grosso do Sul</option>
                                <option value="MG">Minas Gerais</option>
                                <option value="PA">Par√°</option>
                                <option value="PB">Para√≠ba</option>
                                <option value="PR">Paran√°</option>
                                <option value="PE">Pernambuco</option>
                                <option value="PI">Piau√≠</option>
                                <option value="RJ">Rio de Janeiro</option>
                                <option value="RN">Rio Grande do Norte</option>
                                <option value="RS">Rio Grande do Sul</option>
                                <option value="RO">Rond√¥nia</option>
                                <option value="RR">Roraima</option>
                                <option value="SC">Santa Catarina</option>
                                <option value="SP">S√£o Paulo</option>
                                <option value="SE">Sergipe</option>
                                <option value="TO">Tocantins</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>üìù Endere√ßo Completo:</label>
                        <textarea name="delivery_address" id="delivery_address" placeholder="Endere√ßo ser√° preenchido automaticamente..." readonly style="min-height: 80px; background-color: #f8f9fa;"><?= htmlspecialchars($_SESSION['customer_data']['address'] ?? $existing_customer['delivery_address'] ?? '') ?></textarea>
                        <small style="color: #666; font-style: italic;">Obrigat√≥rio apenas se escolher entrega</small>
                    </div>

                    <div class="form-group">
                        <label>üöö Taxa de Entrega:</label>
                        <select name="delivery_fee" id="delivery-fee" onchange="updateDeliveryFee(); toggleAddressRequired()">
                            <option value="0">Retirar no local - Gr√°tis</option>
                            <option value="5.00">Entrega no bairro - R$ 5,00</option>
                            <option value="8.00">Entrega na cidade - R$ 8,00</option>
                            <option value="12.00">Entrega fora da cidade - R$ 12,00</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>üí≥ Forma de Pagamento *:</label>
                        <select name="payment_method" required>
                            <option value="">Selecione a forma de pagamento</option>
                            <option value="dinheiro">üíµ Dinheiro</option>
                            <option value="pix">üì± PIX</option>
                            <option value="cartao debito">üí≥ Cart√£o de D√©bito</option>
                            <option value="cartao credito">üí≥ Cart√£o de Cr√©dito</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>üìù Observa√ß√µes (opcional):</label>
                        <textarea name="observations" placeholder="Alguma observa√ß√£o sobre seu pedido..." style="min-height: 80px;"></textarea>
                    </div>

                    <div style="text-align: center; margin-top: 30px;">
                        <button type="submit" name="complete_order" class="btn btn-success" style="font-size: 18px; padding: 20px 40px;">
                            ‚úÖ Confirmar Pedido
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="hideCheckoutForm()" style="margin-left: 10px;">
                            ‚Üê Voltar aos Produtos
                        </button>
                    </div>
                </form>

                <div class="info-box">
                    <h4>üì± Como funciona:</h4>
                    <p>‚úÖ 1. Adicione os produtos ao carrinho</p>
                    <p>‚úÖ 2. Preencha seus dados e endere√ßo</p>
                    <p>‚úÖ 3. Escolha a forma de pagamento</p>
                    <p>‚úÖ 4. Finalize o pedido</p>
                    <p><strong>üïí Prazo de entrega:</strong> 30-60 minutos</p>
                    <p><strong>üìû D√∫vidas?</strong> WhatsApp: (00) 0000-0000</p>
                </div>
            </div>
        <?php endif; ?>
    </div>

    <!-- Toast para notifica√ß√µes -->
    <div id="toast" class="toast"></div>

    <script>
        let cartMinimized = false;

        // Fun√ß√£o para mostrar toast
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `toast ${type} show`;
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // Fun√ß√£o para alternar carrinho
        function toggleCart() {
            const cart = document.getElementById('floating-cart');
            const toggle = document.getElementById('cart-toggle');
            
            cartMinimized = !cartMinimized;
            
            if (cartMinimized) {
                cart.classList.add('minimized');
                toggle.textContent = '+';
            } else {
                cart.classList.remove('minimized');
                toggle.textContent = '‚àí';
            }
        }

        // Filtro de produtos
        function filterProducts() {
            const category = document.getElementById('category-filter').value.toLowerCase();
            const search = document.getElementById('search-filter').value.toLowerCase();
            const products = document.querySelectorAll('#product-list .product-item');

            products.forEach(item => {
                const itemCategory = item.dataset.category.toLowerCase();
                const itemName = item.dataset.name.toLowerCase();
                const matchCategory = !category || itemCategory === category;
                const matchSearch = !search || itemName.includes(search);
                item.style.display = (matchCategory && matchSearch) ? 'block' : 'none';
            });
        }

        // Fun√ß√£o para adicionar produto ao carrinho via AJAX
        function addToCart(productId, quantity = 1) {
            const formData = new FormData();
            formData.append('ajax_add_to_cart', '1');
            formData.append('product_id', productId);
            formData.append('quantity', quantity);

            fetch('', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateCartDisplay(data);
                    showToast(data.message, 'success');
                } else {
                    showToast(data.message, 'error');
                }
            })
            .catch(error => {
                showToast('Erro ao adicionar produto', 'error');
                console.error('Error:', error);
            });
        }

        // Fun√ß√£o para remover produto do carrinho via AJAX
        function removeFromCart(productId) {
            const formData = new FormData();
            formData.append('ajax_remove_item', '1');
            formData.append('product_id', productId);

            fetch('', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateCartDisplay(data);
                    showToast(data.message, 'success');
                } else {
                    showToast(data.message, 'error');
                }
            })
            .catch(error => {
                showToast('Erro ao remover produto', 'error');
                console.error('Error:', error);
            });
        }

        // Fun√ß√£o para atualizar quantidade via AJAX
        function updateQuantity(productId, quantity) {
            const formData = new FormData();
            formData.append('ajax_update_quantity', '1');
            formData.append('product_id', productId);
            formData.append('quantity', quantity);

            fetch('', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateCartDisplay(data);
                    // Atualizar o total do item espec√≠fico
                    const cartItem = document.querySelector(`[data-product-id="${productId}"]`);
                    if (cartItem) {
                        const totalSpan = cartItem.querySelector('span[style*="color: #28a745"]');
                        if (totalSpan) {
                            totalSpan.textContent = `R$ ${data.item_total}`;
                        }
                    }
                } else {
                    showToast(data.message, 'error');
                    // Reverter o valor anterior
                    location.reload();
                }
            })
            .catch(error => {
                showToast('Erro ao atualizar quantidade', 'error');
                console.error('Error:', error);
            });
        }

        // Fun√ß√£o para atualizar display do carrinho
        function updateCartDisplay(data) {
            document.getElementById('cart-count').textContent = data.cart_count || 0;
            document.getElementById('subtotal-display').textContent = `R$ ${data.subtotal || '0,00'}`;
            
            const cartItems = document.getElementById('cart-items');
            cartItems.innerHTML = data.cart_html;
            
            // Atualizar total
            updateTotalDisplay();
            
            // Habilitar/desabilitar bot√£o de checkout
            const checkoutBtn = document.getElementById('checkout-btn');
            checkoutBtn.disabled = data.cart_count === 0;
            
            // Reattach event listeners
            attachCartEventListeners();
        }

        // Fun√ß√£o para anexar event listeners do carrinho
        function attachCartEventListeners() {
            // Event listeners para bot√µes de remover
            document.querySelectorAll('.remove-item').forEach(btn => {
                btn.addEventListener('click', function() {
                    const productId = this.dataset.productId;
                    removeFromCart(productId);
                });
            });
            
            // Event listeners para inputs de quantidade
            document.querySelectorAll('.quantity-input').forEach(input => {
                input.addEventListener('change', function() {
                    const productId = this.dataset.productId;
                    const quantity = parseInt(this.value);
                    if (quantity > 0) {
                        updateQuantity(productId, quantity);
                    }
                });
            });
        }

        // Fun√ß√£o para atualizar taxa de entrega
        function updateDeliveryFee() {
            const deliveryFee = parseFloat(document.getElementById('delivery-fee').value || 0);
            document.getElementById('delivery-display').textContent = `R$ ${deliveryFee.toFixed(2).replace('.', ',')}`;
            updateTotalDisplay();
        }

        // Fun√ß√£o para atualizar total
        function updateTotalDisplay() {
            const subtotalText = document.getElementById('subtotal-display').textContent;
            const deliveryText = document.getElementById('delivery-display').textContent;
            
            const subtotal = parseFloat(subtotalText.replace('R$ ', '').replace('.', '').replace(',', '.')) || 0;
            const delivery = parseFloat(deliveryText.replace('R$ ', '').replace('.', '').replace(',', '.')) || 0;
            const total = subtotal + delivery;
            
            document.getElementById('total-display').textContent = `R$ ${total.toFixed(2).replace('.', ',')}`;
        }

        // Valida√ß√£o de endere√ßo para entrega
        function toggleAddressRequired() {
            const deliveryFee = parseFloat(document.getElementById('delivery-fee').value);
            const addressField = document.getElementById('delivery_address');
            const addressRequired = document.getElementById('address-required');
            const cepField = document.getElementById('cep');
            const cepRequired = document.getElementById('cep-required');
            const numberField = document.getElementById('number');
            
            if (deliveryFee > 0) {
                cepField.required = true;
                cepRequired.style.display = 'inline';
                numberField.required = true;
                addressRequired.style.display = 'inline';
            } else {
                cepField.required = false;
                cepRequired.style.display = 'none';
                numberField.required = false;
                addressRequired.style.display = 'none';
            }
        }

        // Fun√ß√£o para formatar CEP
        function formatCEP(input) {
            let value = input.value.replace(/\D/g, '');
            if (value.length > 5) {
                value = value.replace(/^(\d{5})(\d{1,3})/, '$1-$2');
            }
            input.value = value;
        }

        // Fun√ß√£o para buscar CEP na API ViaCEP
        function searchCEP(cep) {
            cep = cep.replace(/\D/g, '');
            
            if (cep.length === 8) {
                // Mostrar loading
                const streetField = document.getElementById('street');
                const neighborhoodField = document.getElementById('neighborhood');
                const cityField = document.getElementById('city');
                const stateField = document.getElementById('state');
                
                streetField.value = 'Buscando...';
                neighborhoodField.value = 'Buscando...';
                cityField.value = 'Buscando...';
                stateField.value = 'Buscando...';
                
                fetch(`https://viacep.com.br/ws/${cep}/json/`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.erro) {
                            showToast('CEP n√£o encontrado', 'error');
                            clearAddressFields();
                        } else {
                            fillAddressFields(data);
                            updateFullAddress();
                            showToast('Endere√ßo encontrado!', 'success');
                        }
                    })
                    .catch(error => {
                        showToast('Erro ao buscar CEP', 'error');
                        clearAddressFields();
                        console.error('Error:', error);
                    });
            } else if (cep.length < 8) {
                clearAddressFields();
            }
        }

        // Fun√ß√£o para buscar CEP por endere√ßo (busca reversa)
        function searchCEPByAddress() {
            const street = document.getElementById('street').value.trim();
            const city = document.getElementById('city').value.trim();
            const state = document.getElementById('state').value.trim();
            
            if (street.length >= 3 && city.length >= 3 && state.length >= 2) {
                const cepField = document.getElementById('cep');
                cepField.value = 'Buscando...';
                
                // Normalizar nomes para busca
                const streetNormalized = street.toLowerCase().replace(/[^a-z0-9\s]/g, '').trim();
                const cityNormalized = city.toLowerCase().replace(/[^a-z0-9\s]/g, '').trim();
                const stateNormalized = state.toLowerCase().trim();
                
                fetch(`https://viacep.com.br/ws/${stateNormalized}/${cityNormalized}/${streetNormalized}/json/`)
                    .then(response => response.json())
                    .then(data => {
                        if (Array.isArray(data) && data.length > 0) {
                            // Pegar o primeiro resultado
                            const firstResult = data[0];
                            document.getElementById('cep').value = formatCEPValue(firstResult.cep);
                            fillAddressFields(firstResult);
                            updateFullAddress();
                            showToast(`CEP encontrado: ${firstResult.cep}`, 'success');
                        } else {
                            document.getElementById('cep').value = '';
                            showToast('CEP n√£o encontrado para este endere√ßo', 'error');
                        }
                    })
                    .catch(error => {
                        document.getElementById('cep').value = '';
                        showToast('Erro ao buscar CEP', 'error');
                        console.error('Error:', error);
                    });
            }
        }

        // Fun√ß√£o para formatar CEP com m√°scara
        function formatCEPValue(cep) {
            const cleaned = cep.replace(/\D/g, '');
            if (cleaned.length === 8) {
                return cleaned.replace(/^(\d{5})(\d{3})/, '$1-$2');
            }
            return cleaned;
        }

        // Fun√ß√£o para preencher campos de endere√ßo
        function fillAddressFields(data) {
            const streetField = document.getElementById('street');
            const neighborhoodField = document.getElementById('neighborhood');
            const cityField = document.getElementById('city');
            const stateField = document.getElementById('state');
            
            // S√≥ preenche se o campo estiver vazio ou com "Buscando..."
            if (!streetField.value || streetField.value === 'Buscando...') {
                streetField.value = data.logradouro || '';
            }
            if (!neighborhoodField.value || neighborhoodField.value === 'Buscando...') {
                neighborhoodField.value = data.bairro || '';
            }
            if (!cityField.value || cityField.value === 'Buscando...') {
                cityField.value = data.localidade || '';
            }
            if (!stateField.value || stateField.value === 'Buscando...') {
                stateField.value = data.uf || '';
            }
        }

        // Fun√ß√£o para limpar campos de endere√ßo
        function clearAddressFields() {
            document.getElementById('street').value = '';
            document.getElementById('neighborhood').value = '';
            document.getElementById('city').value = '';
            document.getElementById('state').value = '';
            document.getElementById('delivery_address').value = '';
        }

        // Debounce para evitar muitas requisi√ß√µes
        let searchTimeout;
        function debounceSearch(func, delay) {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(func, delay);
        }

        // Fun√ß√£o para atualizar endere√ßo completo
        function updateFullAddress() {
            const street = document.getElementById('street').value;
            const number = document.getElementById('number').value;
            const complement = document.getElementById('complement').value;
            const neighborhood = document.getElementById('neighborhood').value;
            const city = document.getElementById('city').value;
            const state = document.getElementById('state').value;
            const cep = document.getElementById('cep').value;
            
            let fullAddress = '';
            if (street) fullAddress += street;
            if (number) fullAddress += ', ' + number;
            if (complement) fullAddress += ', ' + complement;
            if (neighborhood) fullAddress += ' - ' + neighborhood;
            if (city) fullAddress += ', ' + city;
            if (state) fullAddress += ' - ' + state;
            if (cep) fullAddress += ', CEP: ' + cep;
            
            document.getElementById('delivery_address').value = fullAddress;
        }

        // Mostrar formul√°rio de checkout
        function showCheckoutForm() {
            document.getElementById('checkout-form').style.display = 'block';
            document.getElementById('checkout-form').scrollIntoView({ behavior: 'smooth' });
        }

        // Ocultar formul√°rio de checkout
        function hideCheckoutForm() {
            document.getElementById('checkout-form').style.display = 'none';
        }

        // Limpar carrinho
        function clearCart() {
            if (confirm('Tem certeza que deseja limpar o carrinho?')) {
                document.querySelectorAll('.cart-item').forEach(item => {
                    const productId = item.dataset.productId;
                    removeFromCart(productId);
                });
            }
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Event listeners para bot√µes "Adicionar ao Carrinho"
            document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const productId = this.dataset.productId;
                    addToCart(productId, 1);
                });
            });
            
            // Anexar event listeners do carrinho
            attachCartEventListeners();
            
            // Event listeners para campos de endere√ßo
            document.getElementById('number')?.addEventListener('input', updateFullAddress);
            document.getElementById('complement')?.addEventListener('input', updateFullAddress);
            
            // Event listeners para busca autom√°tica de CEP
            document.getElementById('street')?.addEventListener('input', function() {
                updateFullAddress();
                debounceSearch(searchCEPByAddress, 1500); // Busca ap√≥s 1.5s de inatividade
            });
            
            document.getElementById('neighborhood')?.addEventListener('input', function() {
                updateFullAddress();
                debounceSearch(searchCEPByAddress, 1500);
            });
            
            document.getElementById('city')?.addEventListener('input', function() {
                updateFullAddress();
                debounceSearch(searchCEPByAddress, 1500);
            });
            
            // Preencher dados do cliente existente
            <?php if ($existing_customer): ?>
                const paymentSelect = document.querySelector('select[name="payment_method"]');
                if (paymentSelect) {
                    paymentSelect.value = '<?= $existing_customer["payment_method"] ?? "" ?>';
                }
                
                const deliverySelect = document.querySelector('select[name="delivery_fee"]');
                if (deliverySelect && <?= $existing_customer["delivery_fee"] ?? 0 ?> > 0) {
                    deliverySelect.value = '<?= number_format($existing_customer["delivery_fee"] ?? 0, 2, ".", "") ?>';
                    updateDeliveryFee();
                    toggleAddressRequired();
                }
            <?php endif; ?>
        });
    </script>
</body>
</html>
